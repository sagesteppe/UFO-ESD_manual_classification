select(-any_of(c('SoilDepthUpper', 'RockFragments', 'DepthMeasure',
'SoilDepthLower', 'Observer', 'HorizonKey', 'PrimaryKey'))) %>%
select(!ends_with('.y'))
to_table <- focal_pits %>%
arrange(SoilKey, HorizonDepthUpper) %>%
group_by(SoilKey) %>%
ungroup() %>%
rename_with(.cols = everything(), ~ str_remove(.x, 'ESD_'))  %>%
unite(Horizon:HorizonModifier, col = 'Horizon', sep = '-', na.rm = T) %>%
unite(HorizonDepthUpper, HorizonDepthLower, col = 'Depth', sep = "-") %>%
unite(Value, Chroma, col = 'VC', sep = " / ", na.rm = T) %>%
unite(Hue, VC, col = 'Color', sep = " ", na.rm = T) %>%
unite(Texture, PctClay, col = 'TextClay', na.rm = T, sep = " ") %>%
mutate(FragmentType = 'Gr', FragmentType2 = 'St', FragmentType3 = 'Cb') %>%
mutate(across(starts_with('FragVol'), ~ round(as.numeric(.x)))) %>%
mutate(across(starts_with('FragVol'), ~ replace_na(.x, 0))) %>%
unite(FragmentType, FragVolPct, FragmentType2, FragVolPct2, FragmentType3, FragVolPct3,
sep = " ", col = 'Rock', na.rm = T) %>%
select(ID, Horizon, Depth, Rock, TextClay, Effer, Color, Structure, SoilKey, PlotKey, Notes)
table_notes <- to_table %>%
select(ID, Notes) %>%
distinct() %>%
st_drop_geometry() %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_notes.csv'))
coords <- to_table %>%
st_transform(4269) %>%
st_coordinates(.) %>%
bind_cols(to_table %>%
select(ID, SoilKey), .) %>%
st_drop_geometry() %>%
distinct(ID, .keep_all = T) %>%
rename(Longitude = X, Latitude = Y) %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_Coords.csv'))
to_table %>%
select(Plot, SoilKey) %>%
distinct() %>%
st_write(., file.path(proc_p, 'AIM_plots_need_ESD.shp'), quiet = T)
to_table %>%
select(ID, SoilKey) %>%
distinct() %>%
st_write(., file.path(proc_p, 'AIM_plots_need_ESD.shp'), quiet = T)
maybe_soils <- to_table %>%
select(ID, PlotKey) %>%
distinct(PlotKey, .keep_all = T)  %>%
st_drop_geometry()
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlotst.shp')
p <- file.path('/media/sagesteppe/ExternalHD/aimDB', 'data/raw')
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlotst.shp')
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlots.shp')
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlots.shp')
p <- file.path('/media/sagesteppe/ExternalHD/aimDB', 'data/raw')
states <- tigris::states() %>%
filter(STUSPS %in% c('CO', 'NM', 'UT'))
states <- tigris::states() %>%
filter(STUSPS %in% c('CO', 'NM', 'UT'))
AIM_summaries <- AIM_summaries[st_intersection(AIM_summaries, states),]
AIM_summaries <- AIM_summaries %>%
select(PlotKey, Soil)
View(maybe_soils)
View(AIM_summaries)
mapped2 <- full_join(maybe_soils, AIM_summaries)[95:109,2:4] %>%
st_as_sf()
View(mapped2)
maybe_soils <- to_table %>%
select(ID, PlotKey) %>%
distinct(PlotKey, .keep_all = T)  %>%
st_drop_geometry()
View(maybe_soils)
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlots.shp')
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlots.shp')
p <- file.path('/media/sagesteppe/ExternalHD/aimDB', 'data/raw')
states <- tigris::states() %>%
filter(STUSPS %in% c('CO', 'NM', 'UT'))
states <- tigris::states() %>%
filter(STUSPS %in% c('CO', 'NM', 'UT'))
AIM_summaries <- AIM_summaries[st_intersection(AIM_summaries, states),]
AIM_summaries <- AIM_summaries %>%
select(PlotKey, Soil)
View(maybe_soils)
mapped <- left_join(maybe_soils, AIM_summaries, by = 'PlotKey') %>%
st_drop_geometry() %>%
select(-geometry)
View(mapped)
View(mapped)
mapped <- left_join(maybe_soils, AIM_summaries, by = 'PlotKey') %>%
st_drop_geometry() %>%
select(-geometry)  %>%
drop_na(Soil)
#write.csv(mapped, 'soils_mapped.csv')
250-76
proc_p
proc_c
proc_p
write.csv(mapped, file.path(proc_p, 'soils_mapped.csv'))
library(tidyverse)
library(sf)
library(here)
proc_p <- file.path(here(),'data/processed')
neESDs <- st_read(file.path(proc_p, 'plotsToVerify.shp'), quiet = T)
proc_r <- '/media/sagesteppe/ExternalHD/aimDB/data/raw/soil'
soilPits <- read.csv(file.path(proc_r,'tblSoilPits.txt' )) %>%  # ESDs cannot be in this table..
select(PlotKey:Observer, SoilDepthUpper:SoilDepthLower, RockFragments, DepthMeasure, Notes, PrimaryKey)
SoilPitHorizons <- read.csv(file.path(proc_r,'tblSoilPitHorizons.txt' )) %>%
select(SoilKey:Effer, HorizonDepthLower:ESD_pH, PrimaryKey, ESD_FragVolPct2:ESD_FragmentType3)
focal_pits <- left_join(neESDs, soilPits, by = 'PrimaryKey') %>%
left_join(., SoilPitHorizons, by = 'PrimaryKey') %>%
rename_with(.cols = everything(), ~ str_remove(.x, '.x$')) %>%
mutate_all(na_if,"")  %>%
mutate(PlotID = str_extract(SoilKey, '[A-Z]{2,3}-[0-9]{3}')) %>%
select(-ESD_StructQual:-ESD_pH,
-ESD_PetrocalcicRubble:-ESD_Gypsic, -ESD_Color:-ESD_Size) %>%
select(-any_of(c('SoilDepthUpper', 'RockFragments', 'DepthMeasure',
'SoilDepthLower', 'Observer', 'HorizonKey', 'PrimaryKey'))) %>%
select(!ends_with('.y'))
to_table <- focal_pits %>%
arrange(SoilKey, HorizonDepthUpper) %>%
group_by(SoilKey) %>%
ungroup() %>%
rename_with(.cols = everything(), ~ str_remove(.x, 'ESD_'))  %>%
unite(Horizon:HorizonModifier, col = 'Horizon', sep = '-', na.rm = T) %>%
unite(HorizonDepthUpper, HorizonDepthLower, col = 'Depth', sep = "-") %>%
unite(Value, Chroma, col = 'VC', sep = " / ", na.rm = T) %>%
unite(Hue, VC, col = 'Color', sep = " ", na.rm = T) %>%
unite(Texture, PctClay, col = 'TextClay', na.rm = T, sep = " ") %>%
mutate(FragmentType = 'Gr', FragmentType2 = 'St', FragmentType3 = 'Cb') %>%
mutate(across(starts_with('FragVol'), ~ round(as.numeric(.x)))) %>%
mutate(across(starts_with('FragVol'), ~ replace_na(.x, 0))) %>%
unite(FragmentType, FragVolPct, FragmentType2, FragVolPct2, FragmentType3, FragVolPct3,
sep = " ", col = 'Rock', na.rm = T) %>%
select(ID, Horizon, Depth, Rock, TextClay, Effer, Color, Structure, SoilKey, PlotKey, Notes)
table_notes <- to_table %>%
select(ID, Notes) %>%
distinct() %>%
st_drop_geometry() %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_notes.csv'))
coords <- to_table %>%
st_transform(4269) %>%
st_coordinates(.) %>%
bind_cols(to_table %>%
select(ID, SoilKey), .) %>%
st_drop_geometry() %>%
distinct(ID, .keep_all = T) %>%
rename(Longitude = X, Latitude = Y) %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_Coords.csv'), row.names = F)
coords <- to_table %>%
st_transform(4269) %>%
st_coordinates(.) %>%
bind_cols(to_table %>%
select(ID, SoilKey), .) %>%
st_drop_geometry() %>%
distinct(ID, .keep_all = T) %>%
rename(Longitude = X, Latitude = Y) %>%
write.csv(., file.path(proc_p, 'AIM_plots_need_esd_Coords.csv'), row.names = F)
rm(proc_r, SoilPitHorizons, soilPits, focal_pits, neESDs, table_notes)
maybe_soils <- to_table %>%
select(ID, PlotKey) %>%
distinct(PlotKey, .keep_all = T)  %>%
st_drop_geometry()
AIM_summaries <- st_read('/media/sagesteppe/ExternalHD/aimDB/data/raw/terrestrialPlots/TerrestrialPlots.shp')
p <- file.path('/media/sagesteppe/ExternalHD/aimDB', 'data/raw')
states <- tigris::states() %>%
filter(STUSPS %in% c('CO', 'NM', 'UT'))
AIM_summaries <- AIM_summaries[st_intersection(AIM_summaries, states),]
AIM_summaries <- AIM_summaries %>%
select(PlotKey, Soil)
mapped <- left_join(maybe_soils, AIM_summaries, by = 'PlotKey') %>%
st_drop_geometry() %>%
select(-geometry)  %>%
drop_na(Soil)
write.csv(mapped, file.path(proc_p, 'soils_mapped.csv'), write.csv = F)
write.csv(mapped, file.path(proc_p, 'soils_mapped.csv'), row.names = F)
rm(UFO_poly, maybe_soils, p, coords, states, mapped, mapped2)
library(tidyverse)
library(sf)
library(here)
proc_p <- file.path(here(),'data/processed')
neESDs <- st_read(file.path(proc_p, 'plotsToVerify.shp'), quiet = T)
proc_r <- '/media/sagesteppe/ExternalHD/aimDB/data/raw/soil'
soilPits <- read.csv(file.path(proc_r,'tblSoilPits.txt' )) %>%  # ESDs cannot be in this table..
select(PlotKey:Observer, SoilDepthUpper:SoilDepthLower, RockFragments, DepthMeasure, Notes, PrimaryKey)
SoilPitHorizons <- read.csv(file.path(proc_r,'tblSoilPitHorizons.txt' )) %>%
select(SoilKey:Effer, HorizonDepthLower:ESD_pH, PrimaryKey, ESD_FragVolPct2:ESD_FragmentType3)
focal_pits <- left_join(neESDs, soilPits, by = 'PrimaryKey') %>%
left_join(., SoilPitHorizons, by = 'PrimaryKey') %>%
rename_with(.cols = everything(), ~ str_remove(.x, '.x$')) %>%
mutate_all(na_if,"")  %>%
mutate(PlotID = str_extract(SoilKey, '[A-Z]{2,3}-[0-9]{3}')) %>%
select(-ESD_StructQual:-ESD_pH,
-ESD_PetrocalcicRubble:-ESD_Gypsic, -ESD_Color:-ESD_Size) %>%
select(-any_of(c('SoilDepthUpper', 'RockFragments', 'DepthMeasure',
'SoilDepthLower', 'Observer', 'HorizonKey', 'PrimaryKey'))) %>%
select(!ends_with('.y'))
to_table <- focal_pits %>%
arrange(SoilKey, HorizonDepthUpper) %>%
group_by(SoilKey) %>%
ungroup() %>%
rename_with(.cols = everything(), ~ str_remove(.x, 'ESD_'))  %>%
unite(Horizon:HorizonModifier, col = 'Horizon', sep = '-', na.rm = T) %>%
unite(HorizonDepthUpper, HorizonDepthLower, col = 'Depth', sep = "-") %>%
unite(Value, Chroma, col = 'VC', sep = " / ", na.rm = T) %>%
unite(Hue, VC, col = 'Color', sep = " ", na.rm = T) %>%
unite(Texture, PctClay, col = 'TextClay', na.rm = T, sep = " ") %>%
mutate(FragmentType = 'Gr', FragmentType2 = 'St', FragmentType3 = 'Cb') %>%
mutate(across(starts_with('FragVol'), ~ round(as.numeric(.x)))) %>%
mutate(across(starts_with('FragVol'), ~ replace_na(.x, 0))) %>%
unite(FragmentType, FragVolPct, FragmentType2, FragVolPct2, FragmentType3, FragVolPct3,
sep = " ", col = 'Rock', na.rm = T) %>%
select(ID, Horizon, Depth, Rock, TextClay, Effer, Color, Structure, SoilKey, PlotKey, Notes)
table_notes <- to_table %>%
select(ID, Notes) %>%
distinct() %>%
st_drop_geometry() %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_notes.csv'))
coords <- to_table %>%
st_transform(4269) %>%
st_coordinates(.) %>%
bind_cols(to_table %>%
select(ID, SoilKey), .) %>%
st_drop_geometry() %>%
distinct(ID, .keep_all = T) %>%
rename(Longitude = X, Latitude = Y) %>%
write.csv(., file.path(proc_p, 'AIM_plots_need_esd_Coords.csv'), row.names = F)
#to_table %>%
#  select(ID, SoilKey) %>%
#  distinct() %>%
#  st_write(., file.path(proc_p, 'AIM_plots_need_ESD.shp'), quiet = T)
rm(proc_r, SoilPitHorizons, soilPits, focal_pits, neESDs, table_notes)
collapse_rows_df <- function(df, variable){
#' Collapse the values within a grouped dataframe function by: Michael Harper
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
linesep<-function(x,y=character()){ # by bart on SO
if(!length(x))
return(y)
linesep(x[-length(x)], c(rep('',x[length(x)]-1),'\\addlinespace',y))
}
lengths <- to_table %>%
group_by(ID) %>%
mutate(length = n()) %>%
distinct(ID, .keep_all = T) %>%
pull(length)
View(to_table)
to_table %>%
dplyr::select(-Notes, -ID, -SoilKey) %>%
st_drop_geometry() %>%
collapse_rows_df(ID) %>%
knitr::kable(booktabs = T, longtable = TRUE, linesep = linesep(lengths)) %>%
kableExtra::kable_styling(latex_options = c("hold_position", "repeat_header"))
to_table %>%
dplyr::select(-Notes, -SoilKey) %>%
st_drop_geometry() %>%
collapse_rows_df(ID) %>%
knitr::kable(booktabs = T, longtable = TRUE, linesep = linesep(lengths)) %>%
kableExtra::kable_styling(latex_options = c("hold_position", "repeat_header"))
library(tidyverse)
library(sf)
library(here)
proc_p <- file.path(here(),'data/processed')
neESDs <- st_read(file.path(proc_p, 'plotsToVerify.shp'), quiet = T)
proc_r <- '/media/sagesteppe/ExternalHD/aimDB/data/raw/soil'
soilPits <- read.csv(file.path(proc_r,'tblSoilPits.txt' )) %>%  # ESDs cannot be in this table..
select(PlotKey:Observer, SoilDepthUpper:SoilDepthLower, RockFragments, DepthMeasure, Notes, PrimaryKey)
SoilPitHorizons <- read.csv(file.path(proc_r,'tblSoilPitHorizons.txt' )) %>%
select(SoilKey:Effer, HorizonDepthLower:ESD_pH, PrimaryKey, ESD_FragVolPct2:ESD_FragmentType3)
focal_pits <- left_join(neESDs, soilPits, by = 'PrimaryKey') %>%
left_join(., SoilPitHorizons, by = 'PrimaryKey') %>%
rename_with(.cols = everything(), ~ str_remove(.x, '.x$')) %>%
mutate_all(na_if,"")  %>%
mutate(PlotID = str_extract(SoilKey, '[A-Z]{2,3}-[0-9]{3}')) %>%
select(-ESD_StructQual:-ESD_pH,
-ESD_PetrocalcicRubble:-ESD_Gypsic, -ESD_Color:-ESD_Size) %>%
select(-any_of(c('SoilDepthUpper', 'RockFragments', 'DepthMeasure',
'SoilDepthLower', 'Observer', 'HorizonKey', 'PrimaryKey'))) %>%
select(!ends_with('.y'))
to_table <- focal_pits %>%
arrange(SoilKey, HorizonDepthUpper) %>%
group_by(SoilKey) %>%
ungroup() %>%
rename_with(.cols = everything(), ~ str_remove(.x, 'ESD_'))  %>%
unite(Horizon:HorizonModifier, col = 'Horizon', sep = '-', na.rm = T) %>%
unite(HorizonDepthUpper, HorizonDepthLower, col = 'Depth', sep = "-") %>%
unite(Value, Chroma, col = 'VC', sep = " / ", na.rm = T) %>%
unite(Hue, VC, col = 'Color', sep = " ", na.rm = T) %>%
unite(Texture, PctClay, col = 'TextClay', na.rm = T, sep = " ") %>%
mutate(FragmentType = 'Gr', FragmentType2 = 'St', FragmentType3 = 'Cb') %>%
mutate(across(starts_with('FragVol'), ~ round(as.numeric(.x)))) %>%
mutate(across(starts_with('FragVol'), ~ replace_na(.x, 0))) %>%
unite(FragmentType, FragVolPct, FragmentType2, FragVolPct2, FragmentType3, FragVolPct3,
sep = " ", col = 'Rock', na.rm = T) %>%
select(ID, Horizon, Depth, Rock, TextClay, Effer, Color, Structure, SoilKey, PlotKey, Notes)
table_notes <- to_table %>%
select(ID, Notes) %>%
distinct() %>%
st_drop_geometry() %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_notes.csv'))
coords <- to_table %>%
st_transform(4269) %>%
st_coordinates(.) %>%
bind_cols(to_table %>%
select(ID, SoilKey), .) %>%
st_drop_geometry() %>%
distinct(ID, .keep_all = T) %>%
rename(Longitude = X, Latitude = Y) %>%
arrange(ID) %>%
write.csv(., file.path(proc_p, 'AIM_plots_need_esd_Coords.csv'), row.names = F)
#to_table %>%
#  select(ID, SoilKey) %>%
#  distinct() %>%
#  st_write(., file.path(proc_p, 'AIM_plots_need_ESD.shp'), quiet = T)
rm(proc_r, SoilPitHorizons, soilPits, focal_pits, neESDs, table_notes)
collapse_rows_df <- function(df, variable){
#' Collapse the values within a grouped dataframe function by: Michael Harper
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
linesep<-function(x,y=character()){ # by bart on SO
if(!length(x))
return(y)
linesep(x[-length(x)], c(rep('',x[length(x)]-1),'\\addlinespace',y))
}
lengths <- to_table %>%
group_by(ID) %>%
mutate(length = n()) %>%
distinct(ID, .keep_all = T) %>%
pull(length)
lengths
to_table %>%
dplyr::select(-Notes, -SoilKey) %>%
st_drop_geometry() %>%
collapse_rows_df(ID) %>%
knitr::kable(booktabs = T, longtable = TRUE, linesep = linesep(lengths)) %>%
kableExtra::kable_styling(latex_options = c("hold_position", "repeat_header"))
View(to_table)
to_table %>%
arrange(ID) %>%
dplyr::select(-Notes, -SoilKey) %>%
st_drop_geometry() %>%
collapse_rows_df(ID) %>%
knitr::kable(booktabs = T, longtable = TRUE, linesep = linesep(lengths)) %>%
kableExtra::kable_styling(latex_options = c("hold_position", "repeat_header"))
table_notes <- to_table %>%
select(ID, Notes) %>%
distinct() %>%
st_drop_geometry() %>%
arrange(ID) %>%
write_csv(., file.path(proc_p, 'AIM_plots_need_esd_notes.csv'))
library(tidyverse)
library(sf)
library(terra)
library(prism)
library(here)
library(kableExtra)
here()
file.path(here(),'/data/processed')
aim_pts <- st_read(file.path(file.path(here(),'/data/processed','/AIM_plots_need_ESD.shp'), quiet = T) %>%
aim_pts <- st_read(file.path(here(),'/data/processed','/AIM_plots_need_ESD.shp'), quiet = T) %>%
st_transform(26912) %>%
st_buffer(30) %>%
st_transform(4269)
aim_pts <- st_read(file.path(here(),'/data/processed/AIM_plots_need_ESD.shp'), quiet = T) %>%
aim_pts <- st_read(file.path(here(),'/data/processed/AIM_plots_need_ESD.shp'), quiet = T) %>%
st_transform(26912) %>%
st_buffer(30) %>%
st_transform(4269)
dem <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_dem_10_smooth_UTM.tif')
slope <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_slope_deg.tif')
dem <- project(dem, crs(slope))
aim_pts_v <- vect(aim_pts)
physio <- tibble(
slope = extract(slope, aim_pts_v, method = 'bilinear', fun = mean)[,2],
dem = extract(dem, aim_pts_v, method = 'bilinear', fun = mean)[,2]) %>%
mutate('elev_ft' = dem * 3.28084) %>%
mutate('slope_prcnt' = tan(slope*pi/180)*100) %>%
dplyr::select(-slope, -dem)
# rm(dem, slope)
# dir.create('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM')
# prism_set_dl_dir('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM')
# get_prism_normals("ppt", "800m", annual = TRUE, keepZip = FALSE)
# get_prism_normals("tmean", "800m", annual = TRUE, keepZip = FALSE)
tmean <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM/PRISM_tmean_30yr_normal_800mM3_annual_bil/PRISM_tmean_30yr_normal_800mM3_annual_bil.bil')
ppt <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM/PRISM_ppt_30yr_normal_800mM3_annual_bil/PRISM_ppt_30yr_normal_800mM3_annual_bil.bil')
annual_climate <- tibble(
tmean_C = extract(tmean, aim_pts_v, method = 'bilinear', fun = mean)[,2],
ppt_mm = extract(ppt, aim_pts_v, method = 'bilinear', fun = mean)[,2],
) %>%
mutate(ppt_inch = (ppt_mm / 10) * 0.393701) %>%
mutate(tmean_F = (tmean_C * 9/5) + 32) %>%
dplyr::select(-ppt_mm)
rm(tmean, ppt)
cbind(aim_pts, physio, annual_climate) %>%
mutate(across(where(is.numeric), ~ round(.,0))) %>%
dplyr::select(ID, elev_ft, slope_prcnt, ppt_inch, tmean_C, tmean_F) %>%
kableExtra::kable(., "latex", booktabs = TRUE, longtable = TRUE,
caption = "Some AIM site characteristics 2022 UFO",
col.names = c('Plot ID', 'Elev. (ft.)', '% Slope', 'Ppt. (in.)', 'Annual Temp. (C)',
'Ann. Temp. (F)')) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position", "repeat_header"))
aim_pts <- aim_pts %>%
st_drop_geometry() %>%
select(ID)
cbind(aim_pts, physio, annual_climate) %>%
mutate(across(where(is.numeric), ~ round(.,0))) %>%
dplyr::select(ID, elev_ft, slope_prcnt, ppt_inch, tmean_C, tmean_F) %>%
kableExtra::kable(., "latex", booktabs = TRUE, longtable = TRUE,
caption = "Some AIM site characteristics 2022 UFO",
col.names = c('Plot ID', 'Elev. (ft.)', '% Slope', 'Ppt. (in.)', 'Annual Temp. (C)',
'Ann. Temp. (F)')) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position", "repeat_header"))
library(tidyverse)
library(sf)
library(terra)
library(prism)
library(here)
library(kableExtra)
file.path(here(),'/data/processed')
aim_pts <- st_read(file.path(here(),'/data/processed/AIM_plots_need_ESD.shp'), quiet = T) %>%
st_transform(26912) %>%
st_buffer(30) %>%
st_transform(4269)
dem <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_dem_10_smooth_UTM.tif')
slope <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_slope_deg.tif')
dem <- project(dem, crs(slope))
aim_pts_v <- vect(aim_pts)
physio <- tibble(
slope = extract(slope, aim_pts_v, method = 'bilinear', fun = mean)[,2],
dem = extract(dem, aim_pts_v, method = 'bilinear', fun = mean)[,2]) %>%
mutate('elev_ft' = dem * 3.28084) %>%
mutate('slope_prcnt' = tan(slope*pi/180)*100) %>%
dplyr::select(-slope, -dem)
# rm(dem, slope)
# dir.create('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM')
# prism_set_dl_dir('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM')
# get_prism_normals("ppt", "800m", annual = TRUE, keepZip = FALSE)
# get_prism_normals("tmean", "800m", annual = TRUE, keepZip = FALSE)
tmean <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM/PRISM_tmean_30yr_normal_800mM3_annual_bil/PRISM_tmean_30yr_normal_800mM3_annual_bil.bil')
ppt <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM/PRISM_ppt_30yr_normal_800mM3_annual_bil/PRISM_ppt_30yr_normal_800mM3_annual_bil.bil')
annual_climate <- tibble(
tmean_C = extract(tmean, aim_pts_v, method = 'bilinear', fun = mean)[,2],
ppt_mm = extract(ppt, aim_pts_v, method = 'bilinear', fun = mean)[,2],
) %>%
mutate(ppt_inch = (ppt_mm / 10) * 0.393701) %>%
mutate(tmean_F = (tmean_C * 9/5) + 32) %>%
dplyr::select(-ppt_mm)
rm(tmean, ppt)
# get_prism_normals(type = "ppt", resolution = "800m", mon = 1:12, keepZip = FALSE)
path <- '/media/sagesteppe/ExternalHD/AIM_Field_rasters/PRISM/'
ppt <- rast(paste0(paste0(path, list.files(path, pattern = 'ppt.*M3_[0-9]{2}'), '/'),
list.files(paste0(path, list.files(path, pattern = 'ppt.*M3_[0-9]{2}'), '/'),
pattern = '.bil$')))
names(ppt) <- substr(month.name, 1, 3)
monthly_precip <- extract(ppt, aim_pts_v, method = 'bilinear', fun = mean)[,2:13]
monthly_precip <- data.frame(monthly_precip/10)
monthly_precip <- monthly_precip %>%
mutate('annual_total' = rowSums(.)) %>%
mutate(across(.cols = 1:12, ~ round((.x/annual_total)*100, 1)))
rm(ppt, path)
aim_pts <- aim_pts %>%
st_drop_geometry() %>%
select(ID)
cbind(aim_pts, physio, annual_climate) %>%
mutate(across(where(is.numeric), ~ round(.,0))) %>%
dplyr::select(ID, elev_ft, slope_prcnt, ppt_inch, tmean_C, tmean_F) %>%
kableExtra::kable(., "latex", booktabs = TRUE, longtable = TRUE,
caption = "Some AIM site characteristics 2022 UFO",
col.names = c('Plot ID', 'Elev. (ft.)', '% Slope', 'Ppt. (in.)', 'Annual Temp. (C)',
'Ann. Temp. (F)')) %>%
kableExtra::kable_styling(latex_options = c("striped", "hold_position", "repeat_header"))
rm(physio, annual_climate)
monthly_precip_t <- data.frame('Plot' = aim_pts$Plot, monthly_precip[,1:12])
View(monthly_precip)
View(aim_pts)
dem <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_dem_10_smooth_UTM.tif')
slope <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_slope_deg.tif')
dem <- project(dem, crs(slope))
aim_pts <- st_read(file.path(here(),'/data/processed/AIM_plots_need_ESD.shp'), quiet = T) %>%
st_transform(26912) %>%
st_buffer(30) %>%
st_transform(4269)
aim_pts_v <- vect(aim_pts)
slope = extract(slope, aim_pts_v, method = 'bilinear', fun = mean)
View(slope)
slope = extract(slope, aim_pts_v, method = 'bilinear')
slope = extract(slope, aim_pts_v, method = 'bilinear')
slope = extract(slope, aim_pts_v, method = 'bilinear', fun = mean)
slope <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_slope_deg.tif')
slope = extract(slope, aim_pts_v, method = 'bilinear')
View(slope)
slope = extract(slope, aim_pts_v, method = 'bilinear', fun = mean)
slope <- rast('/media/sagesteppe/ExternalHD/AIM_Field_rasters/UFO_slope_deg.tif')
slope1 = extract(slope, aim_pts_v, method = 'bilinear', fun = mean)
View(slope1)
slope1 = extract(slope, aim_pts_v, method = 'simple')
View(slope1)
crs(slope)
slope1 = extract(slope, aim_pts_v, method = 'simple', fun = mean, na.rm = T))
slope1 = extract(slope, aim_pts_v, method = 'simple', fun = mean, na.rm = T)
View(slope1)
values(slope)
values(slope) >1
values(slope) > 0
gc()
